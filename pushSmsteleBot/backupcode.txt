import configparser # pip install configparser
import telethon
from telethon import TelegramClient, events, Button # pip install telethon
import requests
import json
from telethon.tl import types
#from telegram import ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, ConversationHandler
from telethon.sessions import StringSession
from telethon.sync import TelegramClient, events
from telethon.tl.custom import Button


#url = "https://smsplus.sslwireless.com"
#response = requests.get(url)
#print("res: ", response.content)
### Initializing Configuration
print("Initializing configuration...")
config = configparser.ConfigParser()
config.read('config.ini')




API_ID = config.get('default','api_id') 
API_HASH = config.get('default','api_hash')
BOT_TOKEN = config.get('default','bot_token')
session_name = "sessions/Bot"

'''
# Read values for MySQLdb
HOSTNAME = config.get('default','hostname')
USERNAME = config.get('default','username')
PASSWORD = config.get('default','password')
DATABASE = config.get('default','database')
'''

# Start the Client (telethon)
client = TelegramClient(session_name, API_ID, API_HASH).start(bot_token=BOT_TOKEN)
'''
bot = Bot(token='6121403424:AAE9VIKmd_eiOMbMKtpAHJ1jcrsDjdYlMrA')
dp = Dispatcher(bot)
'''
#keyboard1 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add("Send")

r =requests.get("https://api.telegram.org/bot6121403424:AAE9VIKmd_eiOMbMKtpAHJ1jcrsDjdYlMrA/getUpdates")
print(r.text)

chat_id = 1387217956

print(chat_id)




@client.on(events.NewMessage)
async def handle_message(event):
    if event.raw_text == "/help":
        button1 = Button.inline("Guideline", b'button1_data')
        #button2 = Button.inline("Button 2", b'button2_data')
        
        #await event.respond("Choose an option:", buttons=[[button1, button2]])
        await event.respond("know how to ask: ", buttons=[button1,])

@client.on(events.CallbackQuery)
async def callback_query(event):
    if event.data == b'button1_data':
        await event.respond('Incorrect format. Write down as following to get desired output: \n MSISDN"<SPACE>"FromDate[yyyy-mm-dd]"<SPACE>"Todate[yyyy-mm-dd]')
    #elif event.data == b'button2_data':
    #    await event.respond("You clicked Button 2!")
### START COMMAND



'''
@client.on(events.NewMessage(pattern="(?i)/start"))
async def start(event):
    # Get sender
    sender = await event.get_sender()
    SENDER = sender.id

    # set text and send message
    text = "Hello i am a bot that give you SMS Success or fail status\nWrite down as following to get desired output:\nMSISDN<SPACE>FromDate[yyyy-mm-dd]<SPACE>todate[yyyy-mm-dd]\n ex: 01712345678 2023-08-17 2023-08-17"
    await client.send_message(SENDER, text )

'''


#@client.on(events.NewMessage(pattern="(?i)/send"))
@client.on(events.NewMessage(pattern=""))
async def start(event):
    # Get sender

    sender = await event.get_sender()
    SENDER = sender.id
    list_of_params = event.message.text.split()
    
    print(event.message.text)
    Dict = {}
    if len(list_of_params ) == 4: 
        
            
        record = {
            "msisdn": list_of_params[0],
            "from_date": list_of_params[1],
            "to_date": list_of_params[2],
            "masking": list_of_params[3]
        }
        #Dict = record
        #url = "http://127.0.0.1:8080/smsai/v1?msisdn="+list_of_params[1]+"&fsmstime="+list_of_params[2]+"&tsmstime="+list_of_params[3]
        url = "http://127.0.0.1:8080/smsai/v1?msisdn="+list_of_params[0]+"&from_date="+list_of_params[1]+"&to_date="+list_of_params[2]+"&masking="+list_of_params[3]

        print("record: ", record)
        #print(url)
        response = requests.get(url)
        #print(response)
        # Sending a GET request with parameters
        #response = requests.post(url,  data = record) 
        #print("ressssss::::", response )   
    else:
        #text= "Incorrect format. Write down as following to get desired output:\nMSISDN &#60; SPACE&#62;FromDate[yyyy-mm-dd]&#60;SPACE&#62;todate[yyyy-mm-dd]\nex: 01712345678 2023-08-17 2023-08-17"
        text= "Incorrect format. Write down as following to get desired output:\nMSISDN<SPACE>FromDate[yyyy-mm-dd]<SPACE>todate[yyyy-mm-dd]<SPACE>MASKING\nex: 01712345678 2023-08-17 2023-08-18 SSL"
        #text ="Less-than: &#60; Greater-than: &#62;"

        await client.send_message(SENDER, text)

    
    
    # set text and send message
    if response.status_code == 200:
        # content_type = response.headers.get('Content-Type')
        # if 'application/json' in content_type:
        #     print("The site is returning JSON data.")
        # else:
        #     print("The site is not returning JSON data.")
        #data = response.json()
        
        
        msg = response.content.decode('utf-8')
        #print(msg)
        #msg= str(msg)
        
        # Split the multi-line string into a list of lines
        i = 0
        lines = msg.split('\n')
        
        #await client.send_message(SENDER, lines[0])
        print(lines)
        # for line in lines[1:-1]:
        for line in lines:  
            #print(line)
            i = i + 1
            await client.send_message(SENDER,  str(i) + ". "+ line)
        await client.send_message(SENDER, "Response ended.")   
         
        #await client.send_message(SENDER, msg)
    #await client.send_message(SENDER, data, parse_mode='html')
    



##### MAIN
if __name__ == '__main__':
    try:
        '''
        print("Initializing Database...")
        #conn_mysql = MySQLdb.connect( host=HOSTNAME, user=USERNAME, passwd=PASSWORD, database= DATABASE  )
        #crsr_mysql = conn_mysql.cursor()
        connection = mysql.connector.connect(
        host=HOSTNAME, 
        user=USERNAME, 
        passwd=PASSWORD, 
        database= DATABASE )
        if connection.is_connected():
            print("Connected to MySQL database")
            crsr_mysql = connection.cursor()    
        
            print("Bot Started...")
            client.run_until_disconnected()
        '''
        client.start()
        print("Bot Started...")
        
        client.run_until_disconnected()
        
    except Exception as error:
        print('Cause: {}'.format(error))
